//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace IS2Client {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class 記事データ : DataSet {
        
        private table記事DataTable tabletable記事;
        
        public 記事データ() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected 記事データ(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["table記事"] != null)) {
                    this.Tables.Add(new table記事DataTable(ds.Tables["table記事"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table記事DataTable table記事 {
            get {
                return this.tabletable記事;
            }
        }
        
        public override DataSet Clone() {
            記事データ cln = ((記事データ)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["table記事"] != null)) {
                this.Tables.Add(new table記事DataTable(ds.Tables["table記事"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletable記事 = ((table記事DataTable)(this.Tables["table記事"]));
            if ((this.tabletable記事 != null)) {
                this.tabletable記事.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "記事データ";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/記事データ.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletable記事 = new table記事DataTable();
            this.Tables.Add(this.tabletable記事);
        }
        
        private bool ShouldSerializetable記事() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void table記事RowChangeEventHandler(object sender, table記事RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table記事DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column番号;
            
            private DataColumn column輸送指示コード;
            
            private DataColumn column輸送指示名;
            
            private DataColumn column品名記事コード;
            
            private DataColumn column品名記事名;
            
            internal table記事DataTable() : 
                    base("table記事") {
                this.InitClass();
            }
            
            internal table記事DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 番号Column {
                get {
                    return this.column番号;
                }
            }
            
            internal DataColumn 輸送指示コードColumn {
                get {
                    return this.column輸送指示コード;
                }
            }
            
            internal DataColumn 輸送指示名Column {
                get {
                    return this.column輸送指示名;
                }
            }
            
            internal DataColumn 品名記事コードColumn {
                get {
                    return this.column品名記事コード;
                }
            }
            
            internal DataColumn 品名記事名Column {
                get {
                    return this.column品名記事名;
                }
            }
            
            public table記事Row this[int index] {
                get {
                    return ((table記事Row)(this.Rows[index]));
                }
            }
            
            public event table記事RowChangeEventHandler table記事RowChanged;
            
            public event table記事RowChangeEventHandler table記事RowChanging;
            
            public event table記事RowChangeEventHandler table記事RowDeleted;
            
            public event table記事RowChangeEventHandler table記事RowDeleting;
            
            public void Addtable記事Row(table記事Row row) {
                this.Rows.Add(row);
            }
            
            public table記事Row Addtable記事Row(int 番号, string 輸送指示コード, string 輸送指示名, string 品名記事コード, string 品名記事名) {
                table記事Row rowtable記事Row = ((table記事Row)(this.NewRow()));
                rowtable記事Row.ItemArray = new object[] {
                        番号,
                        輸送指示コード,
                        輸送指示名,
                        品名記事コード,
                        品名記事名};
                this.Rows.Add(rowtable記事Row);
                return rowtable記事Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                table記事DataTable cln = ((table記事DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new table記事DataTable();
            }
            
            internal void InitVars() {
                this.column番号 = this.Columns["番号"];
                this.column輸送指示コード = this.Columns["輸送指示コード"];
                this.column輸送指示名 = this.Columns["輸送指示名"];
                this.column品名記事コード = this.Columns["品名記事コード"];
                this.column品名記事名 = this.Columns["品名記事名"];
            }
            
            private void InitClass() {
                this.column番号 = new DataColumn("番号", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column番号);
                this.column輸送指示コード = new DataColumn("輸送指示コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column輸送指示コード);
                this.column輸送指示名 = new DataColumn("輸送指示名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column輸送指示名);
                this.column品名記事コード = new DataColumn("品名記事コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column品名記事コード);
                this.column品名記事名 = new DataColumn("品名記事名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column品名記事名);
            }
            
            public table記事Row Newtable記事Row() {
                return ((table記事Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new table記事Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(table記事Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table記事RowChanged != null)) {
                    this.table記事RowChanged(this, new table記事RowChangeEvent(((table記事Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table記事RowChanging != null)) {
                    this.table記事RowChanging(this, new table記事RowChangeEvent(((table記事Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table記事RowDeleted != null)) {
                    this.table記事RowDeleted(this, new table記事RowChangeEvent(((table記事Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table記事RowDeleting != null)) {
                    this.table記事RowDeleting(this, new table記事RowChangeEvent(((table記事Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetable記事Row(table記事Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table記事Row : DataRow {
            
            private table記事DataTable tabletable記事;
            
            internal table記事Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable記事 = ((table記事DataTable)(this.Table));
            }
            
            public int 番号 {
                get {
                    try {
                        return ((int)(this[this.tabletable記事.番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable記事.番号Column] = value;
                }
            }
            
            public string 輸送指示コード {
                get {
                    try {
                        return ((string)(this[this.tabletable記事.輸送指示コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable記事.輸送指示コードColumn] = value;
                }
            }
            
            public string 輸送指示名 {
                get {
                    try {
                        return ((string)(this[this.tabletable記事.輸送指示名Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable記事.輸送指示名Column] = value;
                }
            }
            
            public string 品名記事コード {
                get {
                    try {
                        return ((string)(this[this.tabletable記事.品名記事コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable記事.品名記事コードColumn] = value;
                }
            }
            
            public string 品名記事名 {
                get {
                    try {
                        return ((string)(this[this.tabletable記事.品名記事名Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable記事.品名記事名Column] = value;
                }
            }
            
            public bool Is番号Null() {
                return this.IsNull(this.tabletable記事.番号Column);
            }
            
            public void Set番号Null() {
                this[this.tabletable記事.番号Column] = System.Convert.DBNull;
            }
            
            public bool Is輸送指示コードNull() {
                return this.IsNull(this.tabletable記事.輸送指示コードColumn);
            }
            
            public void Set輸送指示コードNull() {
                this[this.tabletable記事.輸送指示コードColumn] = System.Convert.DBNull;
            }
            
            public bool Is輸送指示名Null() {
                return this.IsNull(this.tabletable記事.輸送指示名Column);
            }
            
            public void Set輸送指示名Null() {
                this[this.tabletable記事.輸送指示名Column] = System.Convert.DBNull;
            }
            
            public bool Is品名記事コードNull() {
                return this.IsNull(this.tabletable記事.品名記事コードColumn);
            }
            
            public void Set品名記事コードNull() {
                this[this.tabletable記事.品名記事コードColumn] = System.Convert.DBNull;
            }
            
            public bool Is品名記事名Null() {
                return this.IsNull(this.tabletable記事.品名記事名Column);
            }
            
            public void Set品名記事名Null() {
                this[this.tabletable記事.品名記事名Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table記事RowChangeEvent : EventArgs {
            
            private table記事Row eventRow;
            
            private DataRowAction eventAction;
            
            public table記事RowChangeEvent(table記事Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public table記事Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
