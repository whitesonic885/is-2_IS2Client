//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace IS2Client {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class 自動出荷エラーデータ : DataSet {
        
        private table自動出荷エラーDataTable tabletable自動出荷エラー;
        
        public 自動出荷エラーデータ() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected 自動出荷エラーデータ(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["table自動出荷エラー"] != null)) {
                    this.Tables.Add(new table自動出荷エラーDataTable(ds.Tables["table自動出荷エラー"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public table自動出荷エラーDataTable table自動出荷エラー {
            get {
                return this.tabletable自動出荷エラー;
            }
        }
        
        public override DataSet Clone() {
            自動出荷エラーデータ cln = ((自動出荷エラーデータ)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["table自動出荷エラー"] != null)) {
                this.Tables.Add(new table自動出荷エラーDataTable(ds.Tables["table自動出荷エラー"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletable自動出荷エラー = ((table自動出荷エラーDataTable)(this.Tables["table自動出荷エラー"]));
            if ((this.tabletable自動出荷エラー != null)) {
                this.tabletable自動出荷エラー.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "自動出荷エラーデータ";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/自動出荷エラーデータ.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletable自動出荷エラー = new table自動出荷エラーDataTable();
            this.Tables.Add(this.tabletable自動出荷エラー);
        }
        
        private bool ShouldSerializetable自動出荷エラー() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void table自動出荷エラーRowChangeEventHandler(object sender, table自動出荷エラーRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table自動出荷エラーDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column番号;
            
            private DataColumn columnエラー行;
            
            private DataColumn columnエラー内容;
            
            internal table自動出荷エラーDataTable() : 
                    base("table自動出荷エラー") {
                this.InitClass();
            }
            
            internal table自動出荷エラーDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 番号Column {
                get {
                    return this.column番号;
                }
            }
            
            internal DataColumn エラー行Column {
                get {
                    return this.columnエラー行;
                }
            }
            
            internal DataColumn エラー内容Column {
                get {
                    return this.columnエラー内容;
                }
            }
            
            public table自動出荷エラーRow this[int index] {
                get {
                    return ((table自動出荷エラーRow)(this.Rows[index]));
                }
            }
            
            public event table自動出荷エラーRowChangeEventHandler table自動出荷エラーRowChanged;
            
            public event table自動出荷エラーRowChangeEventHandler table自動出荷エラーRowChanging;
            
            public event table自動出荷エラーRowChangeEventHandler table自動出荷エラーRowDeleted;
            
            public event table自動出荷エラーRowChangeEventHandler table自動出荷エラーRowDeleting;
            
            public void Addtable自動出荷エラーRow(table自動出荷エラーRow row) {
                this.Rows.Add(row);
            }
            
            public table自動出荷エラーRow Addtable自動出荷エラーRow(int 番号, string エラー行, string エラー内容) {
                table自動出荷エラーRow rowtable自動出荷エラーRow = ((table自動出荷エラーRow)(this.NewRow()));
                rowtable自動出荷エラーRow.ItemArray = new object[] {
                        番号,
                        エラー行,
                        エラー内容};
                this.Rows.Add(rowtable自動出荷エラーRow);
                return rowtable自動出荷エラーRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                table自動出荷エラーDataTable cln = ((table自動出荷エラーDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new table自動出荷エラーDataTable();
            }
            
            internal void InitVars() {
                this.column番号 = this.Columns["番号"];
                this.columnエラー行 = this.Columns["エラー行"];
                this.columnエラー内容 = this.Columns["エラー内容"];
            }
            
            private void InitClass() {
                this.column番号 = new DataColumn("番号", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column番号);
                this.columnエラー行 = new DataColumn("エラー行", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnエラー行);
                this.columnエラー内容 = new DataColumn("エラー内容", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnエラー内容);
            }
            
            public table自動出荷エラーRow Newtable自動出荷エラーRow() {
                return ((table自動出荷エラーRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new table自動出荷エラーRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(table自動出荷エラーRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.table自動出荷エラーRowChanged != null)) {
                    this.table自動出荷エラーRowChanged(this, new table自動出荷エラーRowChangeEvent(((table自動出荷エラーRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.table自動出荷エラーRowChanging != null)) {
                    this.table自動出荷エラーRowChanging(this, new table自動出荷エラーRowChangeEvent(((table自動出荷エラーRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.table自動出荷エラーRowDeleted != null)) {
                    this.table自動出荷エラーRowDeleted(this, new table自動出荷エラーRowChangeEvent(((table自動出荷エラーRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.table自動出荷エラーRowDeleting != null)) {
                    this.table自動出荷エラーRowDeleting(this, new table自動出荷エラーRowChangeEvent(((table自動出荷エラーRow)(e.Row)), e.Action));
                }
            }
            
            public void Removetable自動出荷エラーRow(table自動出荷エラーRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table自動出荷エラーRow : DataRow {
            
            private table自動出荷エラーDataTable tabletable自動出荷エラー;
            
            internal table自動出荷エラーRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletable自動出荷エラー = ((table自動出荷エラーDataTable)(this.Table));
            }
            
            public int 番号 {
                get {
                    try {
                        return ((int)(this[this.tabletable自動出荷エラー.番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable自動出荷エラー.番号Column] = value;
                }
            }
            
            public string エラー行 {
                get {
                    try {
                        return ((string)(this[this.tabletable自動出荷エラー.エラー行Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable自動出荷エラー.エラー行Column] = value;
                }
            }
            
            public string エラー内容 {
                get {
                    try {
                        return ((string)(this[this.tabletable自動出荷エラー.エラー内容Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletable自動出荷エラー.エラー内容Column] = value;
                }
            }
            
            public bool Is番号Null() {
                return this.IsNull(this.tabletable自動出荷エラー.番号Column);
            }
            
            public void Set番号Null() {
                this[this.tabletable自動出荷エラー.番号Column] = System.Convert.DBNull;
            }
            
            public bool Isエラー行Null() {
                return this.IsNull(this.tabletable自動出荷エラー.エラー行Column);
            }
            
            public void Setエラー行Null() {
                this[this.tabletable自動出荷エラー.エラー行Column] = System.Convert.DBNull;
            }
            
            public bool Isエラー内容Null() {
                return this.IsNull(this.tabletable自動出荷エラー.エラー内容Column);
            }
            
            public void Setエラー内容Null() {
                this[this.tabletable自動出荷エラー.エラー内容Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class table自動出荷エラーRowChangeEvent : EventArgs {
            
            private table自動出荷エラーRow eventRow;
            
            private DataRowAction eventAction;
            
            public table自動出荷エラーRowChangeEvent(table自動出荷エラーRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public table自動出荷エラーRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
