//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace IS2Client {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class お届先データ : DataSet {
        
        private tableお届先DataTable tabletableお届先;
        
        public お届先データ() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected お届先データ(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tableお届先"] != null)) {
                    this.Tables.Add(new tableお届先DataTable(ds.Tables["tableお届先"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tableお届先DataTable tableお届先 {
            get {
                return this.tabletableお届先;
            }
        }
        
        public override DataSet Clone() {
            お届先データ cln = ((お届先データ)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tableお届先"] != null)) {
                this.Tables.Add(new tableお届先DataTable(ds.Tables["tableお届先"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletableお届先 = ((tableお届先DataTable)(this.Tables["tableお届先"]));
            if ((this.tabletableお届先 != null)) {
                this.tabletableお届先.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "お届先データ";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/お届先データ.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletableお届先 = new tableお届先DataTable();
            this.Tables.Add(this.tabletableお届先);
        }
        
        private bool ShouldSerializetableお届先() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tableお届先RowChangeEventHandler(object sender, tableお届先RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableお届先DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column番号;
            
            private DataColumn columnコード;
            
            private DataColumn columnカナ略称;
            
            private DataColumn column電話番号;
            
            private DataColumn column郵便番号;
            
            private DataColumn column住所;
            
            private DataColumn column名前;
            
            private DataColumn column特殊計;
            
            internal tableお届先DataTable() : 
                    base("tableお届先") {
                this.InitClass();
            }
            
            internal tableお届先DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 番号Column {
                get {
                    return this.column番号;
                }
            }
            
            internal DataColumn コードColumn {
                get {
                    return this.columnコード;
                }
            }
            
            internal DataColumn カナ略称Column {
                get {
                    return this.columnカナ略称;
                }
            }
            
            internal DataColumn 電話番号Column {
                get {
                    return this.column電話番号;
                }
            }
            
            internal DataColumn 郵便番号Column {
                get {
                    return this.column郵便番号;
                }
            }
            
            internal DataColumn 住所Column {
                get {
                    return this.column住所;
                }
            }
            
            internal DataColumn 名前Column {
                get {
                    return this.column名前;
                }
            }
            
            internal DataColumn 特殊計Column {
                get {
                    return this.column特殊計;
                }
            }
            
            public tableお届先Row this[int index] {
                get {
                    return ((tableお届先Row)(this.Rows[index]));
                }
            }
            
            public event tableお届先RowChangeEventHandler tableお届先RowChanged;
            
            public event tableお届先RowChangeEventHandler tableお届先RowChanging;
            
            public event tableお届先RowChangeEventHandler tableお届先RowDeleted;
            
            public event tableお届先RowChangeEventHandler tableお届先RowDeleting;
            
            public void Addtableお届先Row(tableお届先Row row) {
                this.Rows.Add(row);
            }
            
            public tableお届先Row Addtableお届先Row(int 番号, string コード, string カナ略称, string 電話番号, string 郵便番号, string 住所, string 名前, string 特殊計) {
                tableお届先Row rowtableお届先Row = ((tableお届先Row)(this.NewRow()));
                rowtableお届先Row.ItemArray = new object[] {
                        番号,
                        コード,
                        カナ略称,
                        電話番号,
                        郵便番号,
                        住所,
                        名前,
                        特殊計};
                this.Rows.Add(rowtableお届先Row);
                return rowtableお届先Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tableお届先DataTable cln = ((tableお届先DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tableお届先DataTable();
            }
            
            internal void InitVars() {
                this.column番号 = this.Columns["番号"];
                this.columnコード = this.Columns["コード"];
                this.columnカナ略称 = this.Columns["カナ略称"];
                this.column電話番号 = this.Columns["電話番号"];
                this.column郵便番号 = this.Columns["郵便番号"];
                this.column住所 = this.Columns["住所"];
                this.column名前 = this.Columns["名前"];
                this.column特殊計 = this.Columns["特殊計"];
            }
            
            private void InitClass() {
                this.column番号 = new DataColumn("番号", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column番号);
                this.columnコード = new DataColumn("コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnコード);
                this.columnカナ略称 = new DataColumn("カナ略称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnカナ略称);
                this.column電話番号 = new DataColumn("電話番号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column電話番号);
                this.column郵便番号 = new DataColumn("郵便番号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column郵便番号);
                this.column住所 = new DataColumn("住所", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column住所);
                this.column名前 = new DataColumn("名前", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column名前);
                this.column特殊計 = new DataColumn("特殊計", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column特殊計);
            }
            
            public tableお届先Row Newtableお届先Row() {
                return ((tableお届先Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tableお届先Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tableお届先Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tableお届先RowChanged != null)) {
                    this.tableお届先RowChanged(this, new tableお届先RowChangeEvent(((tableお届先Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tableお届先RowChanging != null)) {
                    this.tableお届先RowChanging(this, new tableお届先RowChangeEvent(((tableお届先Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tableお届先RowDeleted != null)) {
                    this.tableお届先RowDeleted(this, new tableお届先RowChangeEvent(((tableお届先Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tableお届先RowDeleting != null)) {
                    this.tableお届先RowDeleting(this, new tableお届先RowChangeEvent(((tableお届先Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetableお届先Row(tableお届先Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableお届先Row : DataRow {
            
            private tableお届先DataTable tabletableお届先;
            
            internal tableお届先Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletableお届先 = ((tableお届先DataTable)(this.Table));
            }
            
            public int 番号 {
                get {
                    try {
                        return ((int)(this[this.tabletableお届先.番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.番号Column] = value;
                }
            }
            
            public string コード {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.コードColumn] = value;
                }
            }
            
            public string カナ略称 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.カナ略称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.カナ略称Column] = value;
                }
            }
            
            public string 電話番号 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.電話番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.電話番号Column] = value;
                }
            }
            
            public string 郵便番号 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.郵便番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.郵便番号Column] = value;
                }
            }
            
            public string 住所 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.住所Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.住所Column] = value;
                }
            }
            
            public string 名前 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.名前Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.名前Column] = value;
                }
            }
            
            public string 特殊計 {
                get {
                    try {
                        return ((string)(this[this.tabletableお届先.特殊計Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableお届先.特殊計Column] = value;
                }
            }
            
            public bool Is番号Null() {
                return this.IsNull(this.tabletableお届先.番号Column);
            }
            
            public void Set番号Null() {
                this[this.tabletableお届先.番号Column] = System.Convert.DBNull;
            }
            
            public bool IsコードNull() {
                return this.IsNull(this.tabletableお届先.コードColumn);
            }
            
            public void SetコードNull() {
                this[this.tabletableお届先.コードColumn] = System.Convert.DBNull;
            }
            
            public bool Isカナ略称Null() {
                return this.IsNull(this.tabletableお届先.カナ略称Column);
            }
            
            public void Setカナ略称Null() {
                this[this.tabletableお届先.カナ略称Column] = System.Convert.DBNull;
            }
            
            public bool Is電話番号Null() {
                return this.IsNull(this.tabletableお届先.電話番号Column);
            }
            
            public void Set電話番号Null() {
                this[this.tabletableお届先.電話番号Column] = System.Convert.DBNull;
            }
            
            public bool Is郵便番号Null() {
                return this.IsNull(this.tabletableお届先.郵便番号Column);
            }
            
            public void Set郵便番号Null() {
                this[this.tabletableお届先.郵便番号Column] = System.Convert.DBNull;
            }
            
            public bool Is住所Null() {
                return this.IsNull(this.tabletableお届先.住所Column);
            }
            
            public void Set住所Null() {
                this[this.tabletableお届先.住所Column] = System.Convert.DBNull;
            }
            
            public bool Is名前Null() {
                return this.IsNull(this.tabletableお届先.名前Column);
            }
            
            public void Set名前Null() {
                this[this.tabletableお届先.名前Column] = System.Convert.DBNull;
            }
            
            public bool Is特殊計Null() {
                return this.IsNull(this.tabletableお届先.特殊計Column);
            }
            
            public void Set特殊計Null() {
                this[this.tabletableお届先.特殊計Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableお届先RowChangeEvent : EventArgs {
            
            private tableお届先Row eventRow;
            
            private DataRowAction eventAction;
            
            public tableお届先RowChangeEvent(tableお届先Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tableお届先Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
