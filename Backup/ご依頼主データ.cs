//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2470
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace IS2Client {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ご依頼主データ : DataSet {
        
        private tableご依頼主DataTable tabletableご依頼主;
        
        public ご依頼主データ() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ご依頼主データ(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tableご依頼主"] != null)) {
                    this.Tables.Add(new tableご依頼主DataTable(ds.Tables["tableご依頼主"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tableご依頼主DataTable tableご依頼主 {
            get {
                return this.tabletableご依頼主;
            }
        }
        
        public override DataSet Clone() {
            ご依頼主データ cln = ((ご依頼主データ)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tableご依頼主"] != null)) {
                this.Tables.Add(new tableご依頼主DataTable(ds.Tables["tableご依頼主"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletableご依頼主 = ((tableご依頼主DataTable)(this.Tables["tableご依頼主"]));
            if ((this.tabletableご依頼主 != null)) {
                this.tabletableご依頼主.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ご依頼主データ";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ご依頼主データ.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletableご依頼主 = new tableご依頼主DataTable();
            this.Tables.Add(this.tabletableご依頼主);
        }
        
        private bool ShouldSerializetableご依頼主() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tableご依頼主RowChangeEventHandler(object sender, tableご依頼主RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableご依頼主DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column番号;
            
            private DataColumn columnコード;
            
            private DataColumn columnカナ略称;
            
            private DataColumn column電話番号;
            
            private DataColumn column郵便番号;
            
            private DataColumn column住所;
            
            private DataColumn column名前;
            
            private DataColumn column重量;
            
            private DataColumn column得意先コード;
            
            private DataColumn column得意先部課コード;
            
            private DataColumn column得意先部課名;
            
            private DataColumn column重量入力制御;
            
            internal tableご依頼主DataTable() : 
                    base("tableご依頼主") {
                this.InitClass();
            }
            
            internal tableご依頼主DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 番号Column {
                get {
                    return this.column番号;
                }
            }
            
            internal DataColumn コードColumn {
                get {
                    return this.columnコード;
                }
            }
            
            internal DataColumn カナ略称Column {
                get {
                    return this.columnカナ略称;
                }
            }
            
            internal DataColumn 電話番号Column {
                get {
                    return this.column電話番号;
                }
            }
            
            internal DataColumn 郵便番号Column {
                get {
                    return this.column郵便番号;
                }
            }
            
            internal DataColumn 住所Column {
                get {
                    return this.column住所;
                }
            }
            
            internal DataColumn 名前Column {
                get {
                    return this.column名前;
                }
            }
            
            internal DataColumn 重量Column {
                get {
                    return this.column重量;
                }
            }
            
            internal DataColumn 得意先コードColumn {
                get {
                    return this.column得意先コード;
                }
            }
            
            internal DataColumn 得意先部課コードColumn {
                get {
                    return this.column得意先部課コード;
                }
            }
            
            internal DataColumn 得意先部課名Column {
                get {
                    return this.column得意先部課名;
                }
            }
            
            internal DataColumn 重量入力制御Column {
                get {
                    return this.column重量入力制御;
                }
            }
            
            public tableご依頼主Row this[int index] {
                get {
                    return ((tableご依頼主Row)(this.Rows[index]));
                }
            }
            
            public event tableご依頼主RowChangeEventHandler tableご依頼主RowChanged;
            
            public event tableご依頼主RowChangeEventHandler tableご依頼主RowChanging;
            
            public event tableご依頼主RowChangeEventHandler tableご依頼主RowDeleted;
            
            public event tableご依頼主RowChangeEventHandler tableご依頼主RowDeleting;
            
            public void Addtableご依頼主Row(tableご依頼主Row row) {
                this.Rows.Add(row);
            }
            
            public tableご依頼主Row Addtableご依頼主Row(int 番号, string コード, string カナ略称, string 電話番号, string 郵便番号, string 住所, string 名前, System.Double 重量, string 得意先コード, string 得意先部課コード, string 得意先部課名, string 重量入力制御) {
                tableご依頼主Row rowtableご依頼主Row = ((tableご依頼主Row)(this.NewRow()));
                rowtableご依頼主Row.ItemArray = new object[] {
                        番号,
                        コード,
                        カナ略称,
                        電話番号,
                        郵便番号,
                        住所,
                        名前,
                        重量,
                        得意先コード,
                        得意先部課コード,
                        得意先部課名,
                        重量入力制御};
                this.Rows.Add(rowtableご依頼主Row);
                return rowtableご依頼主Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tableご依頼主DataTable cln = ((tableご依頼主DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tableご依頼主DataTable();
            }
            
            internal void InitVars() {
                this.column番号 = this.Columns["番号"];
                this.columnコード = this.Columns["コード"];
                this.columnカナ略称 = this.Columns["カナ略称"];
                this.column電話番号 = this.Columns["電話番号"];
                this.column郵便番号 = this.Columns["郵便番号"];
                this.column住所 = this.Columns["住所"];
                this.column名前 = this.Columns["名前"];
                this.column重量 = this.Columns["重量"];
                this.column得意先コード = this.Columns["得意先コード"];
                this.column得意先部課コード = this.Columns["得意先部課コード"];
                this.column得意先部課名 = this.Columns["得意先部課名"];
                this.column重量入力制御 = this.Columns["重量入力制御"];
            }
            
            private void InitClass() {
                this.column番号 = new DataColumn("番号", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column番号);
                this.columnコード = new DataColumn("コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnコード);
                this.columnカナ略称 = new DataColumn("カナ略称", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnカナ略称);
                this.column電話番号 = new DataColumn("電話番号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column電話番号);
                this.column郵便番号 = new DataColumn("郵便番号", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column郵便番号);
                this.column住所 = new DataColumn("住所", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column住所);
                this.column名前 = new DataColumn("名前", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column名前);
                this.column重量 = new DataColumn("重量", typeof(System.Double), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column重量);
                this.column得意先コード = new DataColumn("得意先コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column得意先コード);
                this.column得意先部課コード = new DataColumn("得意先部課コード", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column得意先部課コード);
                this.column得意先部課名 = new DataColumn("得意先部課名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column得意先部課名);
                this.column重量入力制御 = new DataColumn("重量入力制御", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column重量入力制御);
            }
            
            public tableご依頼主Row Newtableご依頼主Row() {
                return ((tableご依頼主Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tableご依頼主Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tableご依頼主Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tableご依頼主RowChanged != null)) {
                    this.tableご依頼主RowChanged(this, new tableご依頼主RowChangeEvent(((tableご依頼主Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tableご依頼主RowChanging != null)) {
                    this.tableご依頼主RowChanging(this, new tableご依頼主RowChangeEvent(((tableご依頼主Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tableご依頼主RowDeleted != null)) {
                    this.tableご依頼主RowDeleted(this, new tableご依頼主RowChangeEvent(((tableご依頼主Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tableご依頼主RowDeleting != null)) {
                    this.tableご依頼主RowDeleting(this, new tableご依頼主RowChangeEvent(((tableご依頼主Row)(e.Row)), e.Action));
                }
            }
            
            public void Removetableご依頼主Row(tableご依頼主Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableご依頼主Row : DataRow {
            
            private tableご依頼主DataTable tabletableご依頼主;
            
            internal tableご依頼主Row(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletableご依頼主 = ((tableご依頼主DataTable)(this.Table));
            }
            
            public int 番号 {
                get {
                    try {
                        return ((int)(this[this.tabletableご依頼主.番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.番号Column] = value;
                }
            }
            
            public string コード {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.コードColumn] = value;
                }
            }
            
            public string カナ略称 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.カナ略称Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.カナ略称Column] = value;
                }
            }
            
            public string 電話番号 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.電話番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.電話番号Column] = value;
                }
            }
            
            public string 郵便番号 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.郵便番号Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.郵便番号Column] = value;
                }
            }
            
            public string 住所 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.住所Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.住所Column] = value;
                }
            }
            
            public string 名前 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.名前Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.名前Column] = value;
                }
            }
            
            public System.Double 重量 {
                get {
                    try {
                        return ((System.Double)(this[this.tabletableご依頼主.重量Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.重量Column] = value;
                }
            }
            
            public string 得意先コード {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.得意先コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.得意先コードColumn] = value;
                }
            }
            
            public string 得意先部課コード {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.得意先部課コードColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.得意先部課コードColumn] = value;
                }
            }
            
            public string 得意先部課名 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.得意先部課名Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.得意先部課名Column] = value;
                }
            }
            
            public string 重量入力制御 {
                get {
                    try {
                        return ((string)(this[this.tabletableご依頼主.重量入力制御Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("値は DBNull であるため、取得できません。", e);
                    }
                }
                set {
                    this[this.tabletableご依頼主.重量入力制御Column] = value;
                }
            }
            
            public bool Is番号Null() {
                return this.IsNull(this.tabletableご依頼主.番号Column);
            }
            
            public void Set番号Null() {
                this[this.tabletableご依頼主.番号Column] = System.Convert.DBNull;
            }
            
            public bool IsコードNull() {
                return this.IsNull(this.tabletableご依頼主.コードColumn);
            }
            
            public void SetコードNull() {
                this[this.tabletableご依頼主.コードColumn] = System.Convert.DBNull;
            }
            
            public bool Isカナ略称Null() {
                return this.IsNull(this.tabletableご依頼主.カナ略称Column);
            }
            
            public void Setカナ略称Null() {
                this[this.tabletableご依頼主.カナ略称Column] = System.Convert.DBNull;
            }
            
            public bool Is電話番号Null() {
                return this.IsNull(this.tabletableご依頼主.電話番号Column);
            }
            
            public void Set電話番号Null() {
                this[this.tabletableご依頼主.電話番号Column] = System.Convert.DBNull;
            }
            
            public bool Is郵便番号Null() {
                return this.IsNull(this.tabletableご依頼主.郵便番号Column);
            }
            
            public void Set郵便番号Null() {
                this[this.tabletableご依頼主.郵便番号Column] = System.Convert.DBNull;
            }
            
            public bool Is住所Null() {
                return this.IsNull(this.tabletableご依頼主.住所Column);
            }
            
            public void Set住所Null() {
                this[this.tabletableご依頼主.住所Column] = System.Convert.DBNull;
            }
            
            public bool Is名前Null() {
                return this.IsNull(this.tabletableご依頼主.名前Column);
            }
            
            public void Set名前Null() {
                this[this.tabletableご依頼主.名前Column] = System.Convert.DBNull;
            }
            
            public bool Is重量Null() {
                return this.IsNull(this.tabletableご依頼主.重量Column);
            }
            
            public void Set重量Null() {
                this[this.tabletableご依頼主.重量Column] = System.Convert.DBNull;
            }
            
            public bool Is得意先コードNull() {
                return this.IsNull(this.tabletableご依頼主.得意先コードColumn);
            }
            
            public void Set得意先コードNull() {
                this[this.tabletableご依頼主.得意先コードColumn] = System.Convert.DBNull;
            }
            
            public bool Is得意先部課コードNull() {
                return this.IsNull(this.tabletableご依頼主.得意先部課コードColumn);
            }
            
            public void Set得意先部課コードNull() {
                this[this.tabletableご依頼主.得意先部課コードColumn] = System.Convert.DBNull;
            }
            
            public bool Is得意先部課名Null() {
                return this.IsNull(this.tabletableご依頼主.得意先部課名Column);
            }
            
            public void Set得意先部課名Null() {
                this[this.tabletableご依頼主.得意先部課名Column] = System.Convert.DBNull;
            }
            
            public bool Is重量入力制御Null() {
                return this.IsNull(this.tabletableご依頼主.重量入力制御Column);
            }
            
            public void Set重量入力制御Null() {
                this[this.tabletableご依頼主.重量入力制御Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tableご依頼主RowChangeEvent : EventArgs {
            
            private tableご依頼主Row eventRow;
            
            private DataRowAction eventAction;
            
            public tableご依頼主RowChangeEvent(tableご依頼主Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tableご依頼主Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
